!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n;n="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,n.WebGLQualifier=e()}}(function(){return function e(n,t,r){function a(i,c){if(!t[i]){if(!n[i]){var l="function"==typeof require&&require;if(!c&&l)return l(i,!0);if(o)return o(i,!0);var s=new Error("Cannot find module '"+i+"'");throw s.code="MODULE_NOT_FOUND",s}var u=t[i]={exports:{}};n[i][0].call(u.exports,function(e){var t=n[i][1][e];return a(t?t:e)},u,u.exports,e,n,t,r)}return t[i].exports}for(var o="function"==typeof require&&require,i=0;i<r.length;i++)a(r[i]);return a}({1:[function(e,n,t){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),i=e("./shader/default.vertex.glsl"),c=r(i),l=e("./shader/default.fragment.glsl"),s=r(l),u=function(){function e(n){a(this,e),this.options=Object.assign({},{benchmarkDuration:2,benchmarkVertexShader:c["default"],benchmarkFragmentShader:s["default"],qualityRange:[15,30,45,56],qualityNames:["ultralow","low","medium","high","ultrahigh"],showBenchmark:!1},n),this.webGLenabled=this._checkWebGLEnabled(),this.hardwareAccelerated=this._checkHardwareAccelerated(),this.benchmarkFPS=0,this.currentQualityValue=-1,this.currentQualityName=""}return o(e,[{key:"_checkWebGLEnabled",value:function(){if(window.WebGLRenderingContext){var e=document.createElement("canvas"),n=["webgl","experimental-webgl","moz-webgl"],t=!1;for(var r in n)try{if(t=e.getContext(n[r]),t&&"function"==typeof t.getParameter)return n[r]}catch(a){}return!1}return!1}},{key:"_checkHardwareAccelerated",value:function(){var e=/Trident.*rv[ :]*11\./.test(window.navigator.userAgent);if(this.enabled&&e){var n=$("<canvas></canvas>")[0],t=n.getContext(this.enabled,{antialias:!1,stencil:!0,failIfMajorPerformanceCaveat:!0});if(null==t)return!1}return!0}},{key:"_getQualityValue",value:function(e){e||(e=this.benchmarkFPS);for(var n=0;n<this.options.qualityRange.length;n++)if(e<this.options.qualityRange[n])return n;return this.options.qualityRange.length}},{key:"_getQualityName",value:function(e){return this.options.qualityNames[e]}},{key:"benchmark",value:function(e){var n=this;this.isWebGLenabled()&&this.isHardwareAccelerated()||(this.benchmarkFPS=0,this.currentQualityValue=-1,this.currentQualityName="",e&&e(this.benchmarkFPS,this.currentQualityName,this.currentQualityValue));var t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(e,15)},r=document.createElement("canvas");r.width=800,r.height=600,r.style.position="absolute",this.options.showBenchmark?r.style.visibility="visible":(r.style.visibility="hidden",r.style.width="1px",r.style.height="1px"),document.body.appendChild(r);var a=r.width/r.height,o=r.getContext("experimental-webgl");o.viewport(0,0,r.width,r.height),o.clearColor(0,0,0,1),o.clear(o.COLOR_BUFFER_BIT);var i=this.options.benchmarkVertexShader,c=this.options.benchmarkFragmentShader,l=o.createShader(o.VERTEX_SHADER);o.shaderSource(l,i),o.compileShader(l);var s=o.createShader(o.FRAGMENT_SHADER);o.shaderSource(s,c),o.compileShader(s);var u=o.createProgram();o.attachShader(u,l),o.attachShader(u,s),o.linkProgram(u);var f=!1;if(o.getShaderParameter(l,o.COMPILE_STATUS)||(f=!0),o.getShaderParameter(s,o.COMPILE_STATUS)||(f=!0),o.getProgramParameter(u,o.LINK_STATUS)||(f=!0),f)return document.body.removeChild(r),this.benchmarkFPS=0,this.currentQualityValue=-1,this.currentQualityName="",void(e&&e(this.benchmarkFPS,this.currentQualityName,this.currentQualityValue));var d=Date.now(),m=0;return(c=function(){m++;var i=new Float32Array([-1,1*a,1,1*a,1,-1*a,-1,1*a,1,-1*a,-1,-1*a]),l=o.createBuffer();o.bindBuffer(o.ARRAY_BUFFER,l),o.bufferData(o.ARRAY_BUFFER,i,o.STATIC_DRAW);var s=2,f=i.length/s;o.useProgram(u);var h=(Date.now()-d)/1e3;u.resolution=o.getUniformLocation(u,"iResolution"),o.uniform2f(u.resolution,r.width,r.height),u.aVertexPosition=o.getAttribLocation(u,"aVertexPosition"),o.enableVertexAttribArray(u.aVertexPosition),o.vertexAttribPointer(u.aVertexPosition,s,o.FLOAT,!1,0,0),o.drawArrays(o.TRIANGLES,0,f),h>=n.options.benchmarkDuration?(document.body.removeChild(r),n.benchmarkFPS=m/h,n.currentQualityValue=n._getQualityValue(n.benchmarkFPS),n.currentQualityName=n._getQualityName(n.currentQualityValue),e&&e(n.benchmarkFPS,n.currentQualityName,n.currentQualityValue)):t(c)})(),r}},{key:"isWebGLenabled",value:function(){return this.webGLenabled}},{key:"isHardwareAccelerated",value:function(){return this.hardwareAccelerated}}]),e}();n.exports=u},{"./shader/default.fragment.glsl":2,"./shader/default.vertex.glsl":3}],2:[function(e,n,t){n.exports="// simple raytracing example\n// a sphere + a plane\n// if it's hard to deal with this shader, be assured your gc is slow...\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform vec2 iResolution;\n\n//void main() { gl_FragColor = vec4(1.0); }\n\nfloat sdPlane(vec3 p) {\n    return p.y;\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\n//----------------------------------------------------------------------\n\nvec2 opU( vec2 d1, vec2 d2 ) {\n    return (d1.x<d2.x) ? d1 : d2;\n}\n\n//----------------------------------------------------------------------\n\nvec2 map(in vec3 pos) {\n    return opU(vec2(sdPlane(pos), 1.0), vec2(sdSphere(pos - vec3(0.0,0.25, 0.0), 0.25), 46.9));\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd ) {\n    float tmin = 1.0;\n    float tmax = 20.0;\n\n    float precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ ) {\n        vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n        m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax ) {\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n        float h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos ) {\n    vec3 eps = vec3( 0.001, 0.0, 0.0 );\n    vec3 nor = vec3(\n    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n    return normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor ) {\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n\nvec3 render( in vec3 ro, in vec3 rd ) {\n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n    float m = res.y;\n    if( m>-0.5 ) {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n\n        // material\n        col = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\n        if( m<1.5 )\n        {\n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng\n        float occ = calcAO( pos, nor );\n        vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n        float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n\n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n        vec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n        lin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n        col = col*lin;\n\n        col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\n\n    }\n\n    return vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr ) {\n    vec3 cw = normalize(ta-ro);\n    vec3 cp = vec3(sin(cr), cos(cr),0.0);\n    vec3 cu = normalize( cross(cw,cp) );\n    vec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid main() {\n    vec2 q = gl_FragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n    p.x *= iResolution.x/iResolution.y;\n\n    float time = 15.0;// + iGlobalTime;\n\n    // camera\n    vec3 ro = vec3(-0.5+1.5*cos(0.1*time), 1.0, -0.5 + 1.5*sin(0.1*time));\n    vec3 ta = vec3(0.0, 0.0, 0.0);\n\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    // ray direction\n    vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\n    vec3 col = render( ro, rd );\n\n    col = pow( col, vec3(0.4545) );\n\n    gl_FragColor = vec4(col, 1.0);\n}\n"},{}],3:[function(e,n,t){n.exports="attribute vec2 aVertexPosition;\n\nvoid main() {\n    gl_Position = vec4(aVertexPosition, 0.0, 1.0);\n}\n"},{}]},{},[1])(1)});
//# sourceMappingURL=webglqualifier.min.js.map
